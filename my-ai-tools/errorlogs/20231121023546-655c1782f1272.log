{"user_input":"function adjustMmdWidth() {     const mmdContainer = document.getElementById('mmdContainer');     if (!mmdContainer.textContent.trim()) {         return; \/\/ Exit if there's no content     }      const tempDiv = document.createElement('div');     tempDiv.style.display = 'inline-block';     tempDiv.style.position = 'absolute'; \/\/ to avoid affecting layout     tempDiv.style.visibility = 'hidden'; \/\/ hide the element     tempDiv.style.whiteSpace = 'nowrap'; \/\/ no line breaks     tempDiv.textContent = mmdContainer.textContent;      document.body.appendChild(tempDiv);     const width = tempDiv.clientWidth;     document.body.removeChild(tempDiv);      mmdContainer.style.width = `${width}px`; } function updateSvgLink(svgUrl) {     let svgLink = document.getElementById('svgLink');     if (!svgLink) {         svgLink = document.createElement('a');         svgLink.id = 'svgLink';         svgLink.style.display = 'block'; \/\/ Ensure it's displayed as a block for better spacing         svgLink.target = '_blank'; \/\/ Open in new tab         svgLink.style.fontSize = '1.2em'; \/\/ Larger font size         svgLink.style.fontWeight = 'bold'; \/\/ Bold text         document.getElementById('apiResponse').appendChild(svgLink);     }     svgLink.href = svgUrl;     svgLink.textContent = 'Open link to Flowchart-image in new tab'; }  document.getElementById(\"flowchartForm\").addEventListener(\"submit\", function(event){     event.preventDefault();      document.getElementById('loadingIndicator').style.display = 'block';      let formData = new FormData(this);     fetch('http:\/\/95.216.211.224\/api\/generate-flowchart', {         method: 'POST',         body: formData     })     .then(response => response.json())     .then(data => {         document.getElementById('loadingIndicator').style.display = 'none';         const svgContainer = document.getElementById('svgContainer');         svgContainer.innerHTML = '';          if (data.svg_url) {             const img = document.createElement('img');             img.src = data.svg_url;             img.alt = 'Generated Flowchart';             svgContainer.appendChild(img);             updateSvgLink(data.svg_url); \/\/ Update the SVG link              \/\/ Display the toggle button             document.getElementById('toggleMmd').style.display = 'block';         } else {              \/\/Hide the toggle button if no SVG URL is present             document.getElementById('toggleMmd').style.display = 'none';         }              \/\/ ... rest of your code ...     })     .catch(error => {         console.error('Error:', error);         document.getElementById('loadingIndicator').style.display = 'none';         \/\/ Hide the toggle button in case of an error         document.getElementById('toggleMmd').style.display = 'none';     }); });  document.getElementById('mmdContainer').style.display = 'none';  document.getElementById(\"toggleMmd\").addEventListener(\"click\", function() {     const mmdContent = document.getElementById(\"mmdContainer\");     const isHidden = mmdContent.style.display === \"none\";     mmdContent.style.display = isHidden ? \"block\" : \"none\";     this.textContent = isHidden ? \"Hide Mermaid Code\" : \"Show Mermaid Code\";      if (!isHidden) {         adjustMmdWidth(); \/\/ Adjust the width when toggling visibility     } });  document.getElementById(\"loginForm\").addEventListener(\"submit\", function(event) {     event.preventDefault();     let formData = new FormData(this);      fetch('http:\/\/95.216.211.224\/api\/login', {         method: 'POST',         body: formData     })     .then(response => response.json())     .then(data => {         if (data.success) {             console.log(\"Logged in successfully\");              const authButton = document.getElementById('toggleAuth');             authButton.textContent = 'Logout';             authButton.id = 'logoutButton';              document.getElementById('authForms').classList.remove('active');              \/\/ Add event listener for logout             document.getElementById(\"logoutButton\").addEventListener(\"click\", handleLogout);         } else {             console.error(\"Login failed:\", data.message);             \/\/ Additional logic for failed login...         }     })     .catch(error => console.error('Error:', error)); });  document.getElementById(\"registerForm\").addEventListener(\"submit\", function(event) {     event.preventDefault();     let formData = new FormData(this);     let searchParams = new URLSearchParams();     for (let pair of formData) {         searchParams.append(pair[0], pair[1]);     }      fetch('http:\/\/95.216.211.224\/api\/register', {         method: 'POST',         body: searchParams     })     .then(response => response.json())     .then(data => {         \/\/ Logic to handle response...     })     .catch(error => console.error('Error:', error)); });  document.getElementById(\"toggleAuth\").addEventListener(\"click\", function() {     const action = this.dataset.action;          if (action === 'login') {         const authForms = document.getElementById(\"authForms\");         authForms.classList.toggle(\"active\");         this.textContent = authForms.classList.contains(\"active\") ? \"Hide\" : \"Login\/Register\";     } else if (action === 'logout') {         \/\/ Perform logout         fetch('http:\/\/95.216.211.224\/api\/logout', { method: 'POST' })         .then(response => response.json())         .then(data => {             console.log(\"Logged out successfully\");              \/\/ Reset to login\/register             this.textContent = 'Login\/Register';             this.dataset.action = 'login';             document.getElementById('authForms').classList.remove('active');              \/\/ Clear forms             document.getElementById('loginForm').reset();             document.getElementById('registerForm').reset();             document.getElementById('passwordResetForm').reset();         })         .catch(error => console.error('Error:', error));     } });    document.getElementById(\"showRegisterForm\").addEventListener(\"click\", function(event) {     event.preventDefault();     document.getElementById(\"loginForm\").style.display = \"none\";     document.getElementById(\"registerForm\").style.display = \"block\"; });  document.getElementById(\"showLoginForm\").addEventListener(\"click\", function(event) {     event.preventDefault();     document.getElementById(\"registerForm\").style.display = \"none\";     document.getElementById(\"loginForm\").style.display = \"block\"; });  document.getElementById(\"showPasswordResetForm\").addEventListener(\"click\", function(event) {     event.preventDefault();     document.getElementById(\"loginForm\").style.display = \"none\";     document.getElementById(\"passwordResetForm\").style.display = \"block\"; });  document.getElementById(\"showLoginFormFromReset\").addEventListener(\"click\", function(event) {     event.preventDefault();     document.getElementById(\"passwordResetForm\").style.display = \"none\";     document.getElementById(\"loginForm\").style.display = \"block\"; });  document.getElementById(\"passwordResetForm\").addEventListener(\"submit\", function(event) {     event.preventDefault();     let formData = new FormData(this);     fetch('http:\/\/95.216.211.224\/api\/forgot-password', {         method: 'POST',         body: formData     })     .then(response => response.json())     .then(data => {         if (data.success) {             console.log(\"Password reset link sent successfully\");             \/\/ Logic after successful password reset link sent...         } else {             console.error(\"Password reset link sending failed:\", data.message);             \/\/ Logic for failed password reset link sending...         }     })     .catch(error => console.error('Error:', error)); });  document.addEventListener(\"click\", function(event) {     const authButton = event.target;     if (authButton.id === \"logoutButton\") {         event.preventDefault();         fetch('http:\/\/95.216.211.224\/api\/logout', { method: 'POST' })             .then(response => response.json())             .then(data => {                 console.log(\"Logged out successfully\");                  \/\/ Hide and reset the auth forms container first                 const authFormsContainer = document.getElementById('authForms');                 authFormsContainer.classList.remove('active');                 document.getElementById('loginForm').style.display = 'block';                 document.getElementById('registerForm').style.display = 'none';                 document.getElementById('passwordResetForm').style.display = 'none';                  \/\/ Clear input fields in forms                 document.getElementById('loginForm').reset();                 document.getElementById('registerForm').reset();                 document.getElementById('passwordResetForm').reset();                  \/\/ Change the button text and dataset attribute                 authButton.textContent = 'Login\/Register';                 authButton.id = 'toggleAuth'; \/\/ Change ID back to toggleAuth                 authButton.dataset.loggedin = 'false';             })             .catch(error => console.error('Error:', error));     } });   function handleLogout(event) {     event.preventDefault();     fetch('http:\/\/95.216.211.224\/api\/logout', { method: 'POST' })     .then(response => response.json())     .then(data => {         console.log(\"Logged out successfully\");          \/\/ Change the button back to login\/register         const authButton = document.getElementById('logoutButton');         authButton.textContent = 'Login\/Register';         authButton.id = 'toggleAuth';          \/\/ Clear forms         document.getElementById('loginForm').reset();         document.getElementById('registerForm').reset();         document.getElementById('passwordResetForm').reset();     })     .catch(error => console.error('Error:', error)); }"}
{"gpt_error":"cURL error 28: Operation timed out after 30000 milliseconds with 0 bytes received (see https:\/\/curl.haxx.se\/libcurl\/c\/libcurl-errors.html) for https:\/\/api.openai.com\/v1\/chat\/completions"}
